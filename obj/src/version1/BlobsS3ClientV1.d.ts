import { IOpenable } from 'pip-services3-commons-nodex';
import { IConfigurable } from 'pip-services3-commons-nodex';
import { IReferenceable } from 'pip-services3-commons-nodex';
import { IReferences } from 'pip-services3-commons-nodex';
import { ConfigParams } from 'pip-services3-commons-nodex';
import { CompositeLogger } from 'pip-services3-components-nodex';
import { CompositeCounters } from 'pip-services3-components-nodex';
import { FilterParams } from 'pip-services3-commons-nodex';
import { PagingParams } from 'pip-services3-commons-nodex';
import { DataPage } from 'pip-services3-commons-nodex';
import { AwsConnectionResolver } from 'pip-services3-aws-nodex';
import { AwsConnectionParams } from 'pip-services3-aws-nodex';
import { BlobInfoV1 } from './BlobInfoV1';
import { IBlobsClientV1 } from './IBlobsClientV1';
import { BlobDataV1 } from './BlobDataV1';
export declare class BlobsS3ClientV1 implements IOpenable, IConfigurable, IReferenceable, IBlobsClientV1 {
    protected _s3: any;
    protected _opened: boolean;
    protected _connection: AwsConnectionParams;
    protected _bucket: string;
    protected _connectTimeout: number;
    protected _minChunkSize: number;
    protected _maxBlobSize: number;
    protected _reducedRedundancy: boolean;
    protected _maxPageSize: number;
    protected _connectionResolver: AwsConnectionResolver;
    protected _logger: CompositeLogger;
    protected _counters: CompositeCounters;
    constructor(config?: any);
    configure(config: ConfigParams): void;
    setReferences(references: IReferences): void;
    isOpen(): boolean;
    open(correlationId: string): Promise<void>;
    close(correlationId: string): Promise<void>;
    private normalizeName;
    private dataToInfo;
    private encodeString;
    private decodeString;
    private matchString;
    private matchSearch;
    private composeFilter;
    getBlobsByFilter(correlationId: string, filter: FilterParams, paging: PagingParams): Promise<DataPage<BlobInfoV1>>;
    getBlobsByIds(correlationId: string, blobIds: string[]): Promise<BlobInfoV1[]>;
    getBlobById(correlationId: string, blobId: string): Promise<BlobInfoV1>;
    createBlobFromUri(correlationId: string, blob: BlobInfoV1, uri: string): Promise<BlobInfoV1>;
    getBlobUriById(correlationId: string, blobId: string): Promise<string>;
    createBlobFromData(correlationId: string, blob: BlobInfoV1, buffer: any): Promise<BlobInfoV1>;
    getBlobDataById(correlationId: string, blobId: string): Promise<BlobDataV1>;
    createBlobFromStream(correlationId: string, blob: BlobInfoV1): Promise<BlobInfoV1>;
    getBlobStreamById(correlationId: string, blobId: string): Promise<BlobInfoV1>;
    updateBlobInfo(correlationId: string, blob: BlobInfoV1): Promise<BlobInfoV1>;
    markBlobsCompleted(correlationId: string, ids: string[]): Promise<void>;
    deleteBlobById(correlationId: string, blobId: string): Promise<void>;
    deleteBlobsByIds(correlationId: string, blobIds: string[]): Promise<void>;
    clear(correlationId: string): Promise<void>;
}
